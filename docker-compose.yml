version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: contractor_postgres
    environment:
      POSTGRES_DB: contractor_management
      POSTGRES_USER: contractor_user
      POSTGRES_PASSWORD: contractor_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - contractor_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contractor_user -d contractor_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: contractor_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - contractor_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: contractor_app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://contractor_user:contractor_password@postgres:5432/contractor_management
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-super-secret-key-here-min-32-chars
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - contractor_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  contractor_network:
    driver: bridge
